#!/bin/bash -e

usage() {
  echo "loeb - Linaro OpenEmbedded Builder"
  echo
  echo "Usage:"
  echo "  loeb setup    Set up host to build OpenEmbedded"
  echo "  loeb init     Initialize OpenEmbedded repository"
  echo "  loeb sync     Synchronize recipe repository with server"
  echo "  loeb apply    Apply a sauce"
  echo "  loeb env      Enter into OpenEmbedded build environment"
  echo "  loeb save     Save all changes into every repository's stash"
  echo "  loeb restore  Retore changes from every repository's stash"
  echo "  loeb reset    Reset everything to a pristine state"
  echo "  loeb copyconfig"
  echo "                Extract the configuration from a Jenkins build"
  echo "  loeb justbuild"
  echo "                Read configuration, init, apply, and build"
}

log() {
  level=$1; shift
  msg=$*

  if [ "${SILENT}" = "FALSE" ]; then
    echo "[${level^^}] ${msg}"
  fi
}

log_on_error()
{
  local oldopts="$-"
  set +e
  logfile=$(mktemp -q)
  log info "Running [$*]"
  $* > ${logfile} 2>&1
  ret=$?
  if [ ${ret} -ne 0 ]; then
    cat "${logfile}"
  fi
  rm "${logfile}"
  set -${oldopts}
  return ${ret}
}

install_repo() {
  log info "Installing repo"
  mkdir -p "${HOME}/bin"
  curl -Ss https://storage.googleapis.com/git-repo-downloads/repo > "${HOME}/bin/repo"
  chmod a+x "${HOME}/bin/repo"
  if [ "${PATH}" = "${PATH/${HOME}\/bin\:}" ]; then
    export PATH="${HOME}/bin":"${PATH}"
  fi
}

get_repo_base_dir() {
  dir=$(readlink -e "$(repo info -l openembedded/bitbake 2> /dev/null | grep ^Mount | cut -d\  -f3)"/../)
  if [ -d "${dir}/.repo/" ]; then
    echo "${dir}"
  fi
}

loeb_setup() {
  SETUP_JENKINS=no
  SKIP_INSTALL=no
  SKIP_UPDATE=no
  while [ "$1" ]; do
    case $1 in
      --jenkins)
        SETUP_JENKINS=yes
        ;;
      --skip-update)
        SKIP_UPDATE=yes
        ;;
      --skip-install)
        SKIP_INSTALL=yes
        ;;
      *)
        log error "Unknown parameter to ${FUNCNAME}: ${1}"
        exit 1
        ;;
    esac
    shift
  done

  log info "Setup with:"
  log info "* Jenkins: ${SETUP_JENKINS}"
  log info "* Skip apt-get update: ${SKIP_UPDATE}"
  log info "* Skip installation of dependencies: ${SKIP_INSTALL}"

  if [ "${SETUP_JENKINS}" == "yes" ]; then
    sudo mkdir -p /srv/oe
    sudo chown buildslave:buildslave /srv/oe

    sudo mkdir -p ${HOME}/srv/oe/downloads ${HOME}/srv/oe/sstate-cache-${DISTRO}-${MANIFEST_BRANCH}
    ln -s ${HOME}/srv/oe/downloads
    ln -s ${HOME}/srv/oe/sstate-cache-${DISTRO}-${MANIFEST_BRANCH} sstate-cache
  fi

  if [ "${SKIP_INSTALL}" == "no" ]; then
    # Install APT dependencies
    pkg_list="android-tools-fsutils \
              chrpath \
              cpio \
              diffstat \
              gawk \
              libelf-dev \
              libmagickwand-dev \
              libmath-prime-util-perl \
              libsdl1.2-dev \
              libssl-dev \
              locales \
              pxz \
              python-pip \
              python-requests \
              texinfo \
              vim-tiny \
              virtualenv \
              whiptail"
    if [ "${SKIP_UPDATE}" == "no" ]; then
      if ! log_on_error sudo DEBIAN_FRONTEND=noninteractive apt-get -q=2 update; then
        log info "apt update error - try again in a moment"
        sleep 15
        log_on_error sudo DEBIAN_FRONTEND=noninteractive apt-get update || true
      fi
    fi
    if ! log_on_error sudo DEBIAN_FRONTEND=noninteractive apt-get -q=2 install -y ${pkg_list}; then
      log info "apt install error - try again in a moment"
      sleep 15
      log_on_error sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ${pkg_list}
    fi

    # Install jinja2-cli and ruamel.yaml
    pip install --user --force-reinstall jinja2-cli ruamel.yaml

    install_repo
  fi

  if [ "${SETUP_JENKINS}" == "yes" ]; then
    sudo locale-gen --lang en_US.UTF-8
  fi

  # FIXME: make sure git has name and email
}


loeb_init() {
  SYNC=yes
  QUIET=no
  while [ "$1" ]; do
    case $1 in
      --no-sync)
        SYNC=no
        ;;
      --branch)
        shift; BRANCH=$1
        ;;
      --manifest)
        shift; MANIFEST_URL=$1
        ;;
      --quiet)
        QUIET=yes
        ;;
      *)
        log error "Unknown parameter to ${FUNCNAME}: $1"
        exit 1
        ;;
    esac
    shift
  done
  DEFAULT_MANIFEST_URL=${MANIFEST_URL:-https://github.com/96boards/oe-rpb-manifest.git}
  DEFAULT_BRANCH=${BRANCH:-rocko}

  [ "${QUIET}" = "no" ] && read -e -p "Which branch are we building today? [${DEFAULT_BRANCH}] " branch ||:
  [ -z "${branch}" ] && branch="${DEFAULT_BRANCH}"
  echo "Branch selected: ${branch}"

  [ "${QUIET}" = "no" ] && read -e -p "Enter manifest URL [${DEFAULT_MANIFEST_URL}] " manifest_url ||:
  [ -z "${manifest_url}" ] && manifest_url="${DEFAULT_MANIFEST_URL}"
  echo "Manifest URL: ${manifest_url}"

  if ! which repo > /dev/null; then
    install_repo
  fi

  repo init -u "${manifest_url}" -b "${branch}"
  if [ "${SYNC}" == "yes" ]; then
    loeb_sync
  fi
}

loeb_env() {
  dir=$(get_repo_base_dir)
  dir=${dir:-.}
  cd ${dir}

  log info "Entering LOEB environment..."
  COLOR_ON="\\[\\e[1;37;44m\\]"
  COLOR_OFF="\\[\\e[0m\\]"
  TITLE="\\[\\033]0;[loeb:${MACHINE}] \u@\h:\w\\007\\]"
  export NPS1="${TITLE}${COLOR_ON}[loeb:${MACHINE}]${COLOR_OFF} \\u\\[\\]@\\[\\]\\h\\[\\]:\\[\\]\\w$ "
  COMMANDS=""
  if [ $# -gt 0 ]; then
    COMMANDS="$*; exit $?"
  fi
  bash --rcfile <( \
    cat "${HOME}/.bashrc" && \
    echo "export PS1=\"${NPS1}\"" && \
    echo "export MACHINE=\"${MACHINE}\"" && \
    echo "export DISTRO=\"${DISTRO}\"" && \
    echo "source setup-environment \"${BUILD_DIR}\"" && \
    echo "${COMMANDS}" \
  ) -i
}

loeb_sync() {
  log info "Synchronizing..."
  if ! which repo > /dev/null; then
    install_repo
  fi
  repo sync $*
}

loeb_reset() {
  answer=""
  [ $# -gt 0 ] && [ "$1" = "-f" ] && answer=y
  echo "Resetting will remove all unsaved changes and delete untracked files"
  echo "across all repos."
  if [ -z "${answer}" ]; then
    read -e -p "Are you sure you want to proceed? [y/N] " proceed ||:
    answer=${proceed:0:1}
  fi
  if [ "${answer,,}" != "y" ]; then
    echo "Not resetting."
    return
  fi
  dir=$(get_repo_base_dir)
  dir=${dir:-.}
  pushd "${dir}" > /dev/null
  rm -f pinned-manifest-latest.xml
  rm -f pinned-manifest.xml
  rm -f source-manifest.xml
  if [ -d .repo/manifests/ ]; then
    cd .repo/manifests/
    git reset --hard HEAD
    cd "${OLDPWD}"
  fi
  repo forall -c git reset --hard HEAD
  repo forall -c git clean -fdx
  popd > /dev/null
}

loeb_stash() {
  cwd=$(readlink -e $(pwd))
  base_dir=$(get_repo_base_dir)

  case $1 in
  save)
    shift
    id=$1; shift
    git stash save --all "${id}"
    if [ -n "$(git stash list | grep "${id}" | cut -d: -f1)" ]; then
      echo "${cwd}:${id}" >> "${base_dir}/.loeb-stash"
    fi
    ;;
  restore)
    [ -r "${base_dir}/.loeb-stash" ] || return
    id=$(grep "${cwd}" "${base_dir}/.loeb-stash" 2>/dev/null | cut -d: -f2)
    if [ -n "$(git stash list | grep "${id}")" ]; then
      stash=$(git stash list | grep "${id}" | cut -d: -f1)
      git stash pop "${stash}"
      #[ $? -eq 0 ] && rm -f .loeb-stash
    fi
    ;;
  esac
}

loeb_save() {
  echo "This will save all modifications and untracked files into the stash"
  echo "across all repos."
  read -e -p "Are you sure you want to proceed? [y/N] " proceed ||:
  answer=${proceed:0:1}
  if [ "${answer,,}" != "y" ]; then
    echo "Not saving."
    return
  fi
  dir=$(get_repo_base_dir)
  dir=${dir:-.}
  pushd "${dir}" > /dev/null

  datime=$(date +"%Y%m%d%H%M%S")
  if [ -e .loeb-stash ]; then
    echo "A previous stash exists in $(readlink -e .loeb-stash)."
    echo "Cannot continue."
    return 1
  fi

  if [ -d .repo/manifests/ ]; then
    cd .repo/manifests/
    loeb_stash save "loeb-work-${datime}"
    cd "${OLDPWD}"
  fi
  repo forall -c loeb -s stash save "loeb-work-${datime}"
  popd > /dev/null
}

loeb_restore() {
  echo "This will restore all modifications saved in the stash across all repos."
  read -e -p "Are you sure you want to proceed? [y/N] " proceed ||:
  answer=${proceed:0:1}
  if [ "${answer,,}" != "y" ]; then
    echo "Not restoring."
    return
  fi
  dir=$(get_repo_base_dir)
  dir=${dir:-.}
  pushd "${dir}" > /dev/null
  if [ -d .repo/manifests/ ]; then
    cd .repo/manifests/
    loeb -s stash pop
    cd "${OLDPWD}"
  fi
  repo forall -c loeb -s stash restore
  rm -v .loeb-stash
  popd > /dev/null
}

# Sauce of the house, used on all recipes
# needs:
# PUB_DEST
# BUILD_NUMBER
sauce_house() {
  # Copies of our manifest
  cp .repo/manifest.xml source-manifest.xml
  repo manifest -r -o pinned-manifest.xml
  MANIFEST_COMMIT=$(cd .repo/manifests && git rev-parse --short HEAD)

  # Record changes since last build, if available
  BASE_URL=${BASE_URL:-http://snapshots.linaro.org}
  if wget -q ${BASE_URL}${PUB_DEST/\/${BUILD_NUMBER}\//\/latest\/}/pinned-manifest.xml -O ${BASE_DIR}/pinned-manifest-latest.xml; then
    repo diffmanifests ${BASE_DIR}/pinned-manifest-latest.xml ${BASE_DIR}/pinned-manifest.xml > ${BASE_DIR}/manifest-changes.txt
  else
    log warning "Latest build published does not have pinned-manifest.xml. Skipping diff report."
  fi

  # the setup-environment will create auto.conf and site.conf
  # make sure we get rid of old config.
  # let's remove the previous TMPDIR as well.
  # we want to preserve build/buildhistory though.
  rm -rf conf ${BUILD_DIR}/conf ${BUILD_DIR}/tmp-*glibc/

  # Accept EULA if/when needed
  export EULA_dragonboard410c=1
  sh setup-environment ${BUILD_DIR}

  cd ${BUILD_DIR}
  # Add job BUILD_NUMBER to output files names
  cat << EOF >> conf/auto.conf
IMAGE_NAME_append = "-${BUILD_NUMBER}"
KERNEL_IMAGE_BASE_NAME_append = "-${BUILD_NUMBER}"
MODULE_IMAGE_BASE_NAME_append = "-${BUILD_NUMBER}"
DT_IMAGE_BASE_NAME_append = "-${BUILD_NUMBER}"
BOOT_IMAGE_BASE_NAME_append = "-${BUILD_NUMBER}"
EOF

  # get build stats to make sure that we use sstate properly
  cat << EOF >> conf/auto.conf
INHERIT += "buildstats buildstats-summary"
EOF
}

# Sauce for Reference Platform builds
sauce_rpb() {
  dir=$(get_repo_base_dir)
  dir=${dir:-.}
  cd "${dir}"

  sauce_house
}

# Sauce for Linux Kernel Functional Testing builds
# needs:
# KERNEL_RECIPE
# KERNEL_VERSION
# SRCREV_kernel
sauce_lkft() {
  dir=$(get_repo_base_dir)
  dir=${dir:-.}
  cd "${dir}"

  if [ -z "${KERNEL_RECIPE}" ]; then
    echo "Kernel recipe has not been defined. Please set KERNEL_RECIPE in .loeb.config and run again."
    exit 1
  fi

  sauce_house

  # Set the kernel to use
  distro_conf=$(find ../layers/meta-rpb/conf/distro -name rpb.inc)
  cat << EOF >> ${distro_conf}
PREFERRED_PROVIDER_virtual/kernel = "${KERNEL_RECIPE}"
EOF

  case "${KERNEL_RECIPE}" in
    linux-hikey-aosp|linux-generic-android-common-o*|linux-generic-lsk*|linux-generic-stable*)
      cat << EOF >> ${distro_conf}
PREFERRED_VERSION_${KERNEL_RECIPE} = "${KERNEL_VERSION}+git%"
EOF
      ;;
  esac

  # Set the image types to use
  cat << EOF >> ${distro_conf}
IMAGE_FSTYPES_remove = "ext4 iso wic"
EOF

  case "${KERNEL_RECIPE}" in
    linux-*-aosp|linux-*-android-*)
      cat << EOF >> ${distro_conf}
CONSOLE = "ttyFIQ0"
EOF
      ;;
  esac

  # Include additional recipes in the image
  [ "${MACHINE}" = "am57xx-evm" -o "${MACHINE}" = "beaglebone" ] || extra_pkgs="numactl"
  cat << EOF >> conf/local.conf
CORE_IMAGE_BASE_INSTALL_append = " kernel-selftests kselftests-mainline kselftests-next libhugetlbfs-tests ltp ${extra_pkgs}"
CORE_IMAGE_BASE_INSTALL_append = " python python-misc python-modules python-numpy python-pexpect python-pyyaml"
CORE_IMAGE_BASE_INSTALL_append = " git parted packagegroup-core-buildessential packagegroup-core-tools-debug tzdata"
EOF

  # Override cmdline
  cat << EOF >> conf/local.conf
CMDLINE_remove = "quiet"
EOF

  # Remove recipes:
  # - docker to reduce image size
  cat << EOF >> conf/local.conf
RDEPENDS_packagegroup-rpb_remove = "docker"
EOF

  cat << EOF >> conf/local.conf
DEFAULTTUNE_intel-core2-32 = "core2-64"
SERIAL_CONSOLES_remove_intel-core2-32 = "115200;ttyPCH0"
SERIAL_CONSOLES_append_dragonboard-410c = " 115200;ttyMSM1"
SERIAL_CONSOLES_append_hikey = " 115200;ttyAMA2"
EOF

  # Enable lkft-metadata class
  cat << EOF >> conf/local.conf
INHERIT += "lkft-metadata"
LKFTMETADATA_COMMIT = "1"
EOF

  # Remove systemd firstboot and machine-id file
  # Backport serialization change from v234 to avoid systemd tty race condition
  # Only on Morty
  if [ "${BRANCH}" = "morty" ]; then
    mkdir -p ../layers/meta-96boards/recipes-core/systemd/systemd
    wget -q http://people.linaro.org/~fathi.boudra/backport-v234-e266c06-v230.patch \
      -O ../layers/meta-96boards/recipes-core/systemd/systemd/backport-v234-e266c06-v230.patch
    cat << EOF >> ../layers/meta-96boards/recipes-core/systemd/systemd/e2fsck.conf
[options]
# This will prevent e2fsck from stopping boot just because the clock is wrong
broken_system_clock = 1
EOF
    backported_patch="file://backport-v234-e266c06-v230.patch"
    systemd_recipe=$(ls ../layers/openembedded-core/meta/recipes-core/systemd/systemd_*.bb)
    [ "${systemd_recipe}" == "systemd_234.bb" ] && backported_patch=""
    cat << EOF >> ../layers/meta-96boards/recipes-core/systemd/systemd_%.bbappend
FILESEXTRAPATHS_prepend := "\${THISDIR}/\${PN}:"

SRC_URI += "\\
    ${backported_patch} \\
    file://e2fsck.conf \\
"

PACKAGECONFIG_remove = "firstboot"

do_install_append() {
    # Install /etc/e2fsck.conf to avoid boot stuck by wrong clock time
    install -m 644 -p -D \${WORKDIR}/e2fsck.conf \${D}\${sysconfdir}/e2fsck.conf

    rm -f \${D}\${sysconfdir}/machine-id
}

FILES_\${PN} += "\${sysconfdir}/e2fsck.conf "
EOF
  fi

  # Update kernel recipe SRCREV
  if [ "${KERNEL_RECIPE}" = "linux-generic" ]; then
    custom_kinfo=$(find ../layers/meta-96boards -name custom-kernel-info.inc)
    sed -i "s|^KERNEL_COMMIT = .*|KERNEL_COMMIT = \"${SRCREV_kernel}\"|" ${custom_kinfo}
    sed -i "s|^KERNEL_REPO = .*|KERNEL_REPO = \"${CUSTOM_KERNEL_REPO}\"|" ${custom_kinfo}
    sed -i "s|^KERNEL_BRANCH = .*|KERNEL_BRANCH = \"${CUSTOM_KERNEL_BRANCH}\"|" ${custom_kinfo}
  else
    echo "SRCREV_kernel_${MACHINE} = \"${SRCREV_kernel}\"" >> conf/local.conf
  fi

}

sauce_lhg() {
  :
}

sauce_none() {
  log info "Not applying any sauce."
}

loeb_apply() {
  if [ $# -gt 0 ]; then
    sauce=$1
  fi

  if [ -z "${MACHINE}" -o -z "${DISTRO}" ]; then
    loeb_config
  fi

  declare -a SAUCES
  SAUCES=(none rpb lkft)
  echo "A 'sauce' adds to the recipes to achieve an unparalleled"
  echo "flavor. Sauce can be one of:"
  echo "  ${SAUCES[@]}"
  while [ ! "${sauce}" ]; do
    read -e -p "Which sauce do you want to apply? (Default: none) " sauce ||:
    sauce="${sauce:-none}"
    sauce="${sauce,,}"
    [[ ! " ${SAUCES[@]} " =~ " ${sauce} " ]] && log warning "Invalid sauce: ${sauce}" && sauce=""
  done
  log info "Chosen sauce: ${sauce}"

  sauce_${sauce}

  cat << EOF > ${BASE_DIR}/env-loeb
set -a
MACHINE=${MACHINE}
DISTRO=${DISTRO}
set +a
. setup-environment ${BUILD_DIR}
EOF
  log info "Done. You can now run:"
  log info "  loeb env"
  log info "or:"
  log info "  source env-loeb"
}

update_config() {
  item=$1; shift
  value="$*"
  if [ -f "${CONFIG_FILE}" ] && grep -q ^"${item}=" "${CONFIG_FILE}"; then
    sed -i -e "s|^${item}=.*|${item}=${value}|" "${CONFIG_FILE}"
  else
    echo "${item}=${value}" >> "${CONFIG_FILE}"
  fi
}

show_config() {
  if [ -f ${CONFIG_FILE} ]; then
    if [ $# -eq 0 ]; then
      log info "Configuration:"
      cat "${CONFIG_FILE}"
    else
      log info "[config] $(grep ^$1= ${CONFIG_FILE})"
    fi
  fi
}

loeb_config() {
  DEFAULT_MACHINE=hikey
  DEFAULT_DISTRO=rpb

  read -e -p "Machine to build for? [${DEFAULT_MACHINE}] " machine ||:
  [ -z "${machine}" ] && machine="${DEFAULT_MACHINE}"
  echo "Selected machine: ${machine}"
  update_config MACHINE "${machine}"
  export MACHINE="${machine}"

  read -e -p "Distro to build? [${DEFAULT_DISTRO}] " distro ||:
  [ -z "${distro}" ] && distro="${DEFAULT_DISTRO}"
  echo "Selected distro: ${distro}"
  update_config DISTRO "${distro}"
  export DISTRO="${distro}"
}

# $1 xml needle
# $2 hay file
xml_get_var()
{
  v=$1
  xpath -q -e "/matrixRun/action/parameter[name=\"${v}\"]/value/text()" "$2"
}

loeb_copyconfig()
{
  url=$1
  # FIXME: sanitize URL, verify XML API
  wget -q "${url}/api/xml" -O jenkins-config.xml
  varDISTRO=$(echo "${url}" | egrep -o 'DISTRO=[0-9a-zA-Z-]*')
  varMACHINE=$(echo "${url}" | egrep -o 'MACHINE=[0-9a-zA-Z-]*')
  BRANCH=$(xml_get_var MANIFEST_BRANCH jenkins-config.xml)

  (
    echo "${varDISTRO}"
    echo "${varMACHINE}"
    echo "BRANCH=${BRANCH}"
    for v in KERNEL_BRANCH KERNEL_RECIPE KERNEL_REPO KERNEL_VERSION SRCREV_kernel; do
      echo "${v}=$(xml_get_var ${v} jenkins-config.xml)"
    done
  ) | tee -a .loeb.config

  rm -f jenkins-config.xml
}

loeb_justbuild()
{
  FLAVOR=lkft
  while [ "$1" ]; do
    case $1 in
      -f|--flavor)
        shift; FLAVOR=$1
        ;;
      -c|--config)
        shift; CONFIG_FILE=$1
        ;;
      *)
        break
        ;;
    esac
    shift
  done
  if [ $# -gt 0 ]; then
    targets=$@
  else
    targets="rpb-console-image"
  fi

  if [ "${CONFIG_FILE:0:4}" = "http" ]; then
    loeb_copyconfig ${CONFIG_FILE}
  fi
  set -a
  source .loeb.config
  set +a

  if [[ -v JENKINS_URL ]]; then
    loeb_setup --jenkins
  fi

  if [ ! -d .repo ]; then
    loeb_init --no-sync --quiet
  fi

  loeb_reset -f
  loeb_sync
  loeb_apply lkft
  loeb env bitbake ${targets}
}

loeb_post()
{
  #set -xeu
  DEPLOY_DIR_IMAGE=$(bitbake -e | grep "^DEPLOY_DIR_IMAGE="| cut -d'=' -f2 | tr -d '"')

  # Prepare files to publish
  rm -f ${DEPLOY_DIR_IMAGE}/*.txt
  find ${DEPLOY_DIR_IMAGE} -type l -delete
  [ -e /srv/oe/source-manifest.xml ] && mv -v /srv/oe/source-manifest.xml ${DEPLOY_DIR_IMAGE}
  [ -e /srv/oe/pinned-manifest.xml ] && mv -v /srv/oe/pinned-manifest.xml ${DEPLOY_DIR_IMAGE}
  [ -e /srv/oe/pinned-manifest.xml ] && cat ${DEPLOY_DIR_IMAGE}/pinned-manifest.xml

  # FIXME: IMAGE_FSTYPES_remove doesn't work
  rm -fv ${DEPLOY_DIR_IMAGE}/*.rootfs.ext4 \
        ${DEPLOY_DIR_IMAGE}/*.rootfs.iso \
        ${DEPLOY_DIR_IMAGE}/*.rootfs.wic* \
        ${DEPLOY_DIR_IMAGE}/*.iso \
        ${DEPLOY_DIR_IMAGE}/*.stimg

  # FIXME: Sparse and converted images here, until it gets done by OE
  case "${MACHINE}" in
    juno)
      ;;
    intel-core2-32)
      for rootfs in ${DEPLOY_DIR_IMAGE}/*.hddimg; do
        [ -e ${rootfs} ] && pxz -v ${rootfs}
      done
      ;;
    *)
      for rootfs in ${DEPLOY_DIR_IMAGE}/*.rootfs.ext4.gz; do
        gunzip -k ${rootfs}
        sudo ext2simg -v ${rootfs%.gz} ${rootfs%.ext4.gz}.img
        rm -f ${rootfs%.gz}
        gzip -9v ${rootfs%.ext4.gz}.img
      done
      ;;
  esac

  # Create MD5SUMS file
  find ${DEPLOY_DIR_IMAGE} -type f | xargs md5sum > MD5SUMS.txt
  sed -i "s|${DEPLOY_DIR_IMAGE}/||" MD5SUMS.txt
  cat MD5SUMS.txt
  mv MD5SUMS.txt ${DEPLOY_DIR_IMAGE}

  GCCVERSION=$(bitbake -e | grep "^GCCVERSION="| cut -d'=' -f2 | tr -d '"')
  TARGET_SYS=$(bitbake -e | grep "^TARGET_SYS="| cut -d'=' -f2 | tr -d '"')
  TUNE_FEATURES=$(bitbake -e | grep "^TUNE_FEATURES="| cut -d'=' -f2 | tr -d '"')
  STAGING_KERNEL_DIR=$(bitbake -e | grep "^STAGING_KERNEL_DIR="| cut -d'=' -f2 | tr -d '"')

  # lkft-metadata class generates metadata file, which can be sourced
  for recipe in kselftests-mainline kselftests-next ltp libhugetlbfs; do
    md=lkftmetadata/packages/*/${recipe}/metadata
    if [ -e ${md} ]; then
      source lkftmetadata/packages/*/${recipe}/metadata
    else
      echo "WARNING: Not found: ${md}"
    fi
  done

  BOOT_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "boot-*-${MACHINE}-*-${BUILD_NUMBER}*.img" | sort | xargs -r basename)
  KERNEL_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "*Image-*-${MACHINE}-*-${BUILD_NUMBER}.bin" | xargs -r basename)
  ROOTFS_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "rpb-console-image-lkft-${MACHINE}-*-${BUILD_NUMBER}.rootfs.img.gz" | xargs -r basename)
  ROOTFS_EXT4=$(find ${DEPLOY_DIR_IMAGE} -type f -name "rpb-console-image-lkft-${MACHINE}-*-${BUILD_NUMBER}.rootfs.ext4.gz" | xargs -r basename)
  ROOTFS_TARXZ_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "rpb-console-image-lkft-${MACHINE}-*-${BUILD_NUMBER}.rootfs.tar.xz" | xargs -r basename)
  HDD_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "rpb-console-image-lkft-${MACHINE}-*-${BUILD_NUMBER}.hddimg.xz" | xargs -r basename)
  case "${MACHINE}" in
    am57xx-evm)
      # QEMU arm 32bit needs the zImage file, not the uImage file.
      # KERNEL_IMG is not used for the real hardware itself.
      KERNEL_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "zImage-*-${MACHINE}-*-${BUILD_NUMBER}.bin" | xargs -r basename)
      ;;
    juno)
      DTB_IMG=$(find ${DEPLOY_DIR_IMAGE} -type f -name "*Image-*-${MACHINE}-r2-*-${BUILD_NUMBER}.dtb" | xargs -r basename)
      ;;
  esac

  cat > ${DEPLOY_DIR_IMAGE}/build_config.json <<EOF
{
  "kernel_repo" : "${KERNEL_REPO}",
  "kernel_commit_id" : "${SRCREV_kernel}",
  "make_kernelversion" : "${MAKE_KERNELVERSION}",
  "kernel_branch" : "${KERNEL_BRANCH}",
  "kernel_describe" : "${KERNEL_DESCRIBE}",
  "kselftest_mainline_url" : "${KSELFTESTS_MAINLINE_URL}",
  "kselftest_mainline_version" : "${KSELFTESTS_MAINLINE_VERSION}",
  "kselftest_next_url" : "${KSELFTESTS_NEXT_URL}",
  "kselftest_next_version" : "${KSELFTESTS_NEXT_VERSION}",
  "ltp_url" : "${LTP_URL}",
  "ltp_version" : "${LTP_VERSION}",
  "ltp_revision" : "${LTP_REVISION}",
  "libhugetlbfs_url" : "${LIBHUGETLBFS_URL}",
  "libhugetlbfs_version" : "${LIBHUGETLBFS_VERSION}",
  "libhugetlbfs_revision" : "${LIBHUGETLBFS_REVISION}",
  "build_arch" : "${TUNE_FEATURES}",
  "compiler" : "${TARGET_SYS} ${GCCVERSION}",
  "build_location" : "${BASE_URL}/${PUB_DEST}"
}
EOF
echo "${DEPLOY_DIR_IMAGE}/build_config.json:"
cat ${DEPLOY_DIR_IMAGE}/build_config.json

  cat << EOF > ${WORKSPACE}/post_build_lava_parameters
DEPLOY_DIR_IMAGE=${DEPLOY_DIR_IMAGE}
BASE_URL=${BASE_URL}
BOOT_URL=${BASE_URL}/${PUB_DEST}/${BOOT_IMG}
SYSTEM_URL=${BASE_URL}/${PUB_DEST}/${ROOTFS_IMG}
KERNEL_URL=${BASE_URL}/${PUB_DEST}/${KERNEL_IMG}
DTB_URL=${BASE_URL}/${PUB_DEST}/${DTB_IMG}
RECOVERY_IMAGE_URL=${BASE_URL}/${PUB_DEST}/juno-oe-uboot.zip
NFSROOTFS_URL=${BASE_URL}/${PUB_DEST}/${ROOTFS_TARXZ_IMG}
EXT4_IMAGE_URL=${BASE_URL}/${PUB_DEST}/${ROOTFS_EXT4}
HDD_URL=${BASE_URL}/${PUB_DEST}/${HDD_IMG}
KERNEL_COMMIT=${SRCREV_kernel}
KERNEL_CONFIG_URL=${BASE_URL}/${PUB_DEST}/config
KERNEL_DEFCONFIG_URL=${BASE_URL}/${PUB_DEST}/defconfig
KSELFTESTS_MAINLINE_URL=${KSELFTESTS_MAINLINE_URL}
KSELFTESTS_MAINLINE_VERSION=${KSELFTESTS_MAINLINE_VERSION}
KSELFTESTS_NEXT_URL=${KSELFTESTS_NEXT_URL}
KSELFTESTS_NEXT_VERSION=${KSELFTESTS_NEXT_VERSION}
LTP_URL=${LTP_URL}
LTP_VERSION=${LTP_VERSION}
LTP_REVISION=${LTP_REVISION}
LIBHUGETLBFS_URL=${LIBHUGETLBFS_URL}
LIBHUGETLBFS_VERSION=${LIBHUGETLBFS_VERSION}
LIBHUGETLBFS_REVISION=${LIBHUGETLBFS_REVISION}
MAKE_KERNELVERSION=${MAKE_KERNELVERSION}
TOOLCHAIN="${TARGET_SYS} ${GCCVERSION}"
EOF

  echo "${WORKSPACE}/post_build_lava_parameters:"
  cat "${WORKSPACE}/post_build_lava_parameters"
}

# START HERE
BASE_DIR=$(get_repo_base_dir)
BASE_DIR=${BASE_DIR:-.}
CONFIG_FILE="${BASE_DIR}/.loeb.config"
BUILD_DIR=${BUILD_DIR:-build}
export BUILD_NUMBER=${BUILD_NUMBER:-1337}
SILENT=FALSE

if [ $# -lt 1 ]; then
  usage
  exit 0
fi

if [ "$1" == "-c" ]; then
  shift
  CONFIG_FILE=$1
  shift
fi

if [ "$1" == "-s" ]; then
  SILENT=TRUE
  shift
fi

if [ -f "${CONFIG_FILE}" ]; then
  log info "Reading config from ${CONFIG_FILE}"
  set -a
  source "${CONFIG_FILE}"
  set +a
fi

action=$1; shift
case ${action} in
  apply)
    loeb_apply $*
    ;;
  config)
    loeb_config $*
    ;;
  copyconfig)
    loeb_copyconfig $*
    ;;
  env)
    loeb_env $*
    ;;
  init)
    loeb_init $*
    ;;
  justbuild)
    loeb_justbuild $*
    ;;
  post)
    loeb_post $*
    ;;
  reset)
    loeb_reset $*
    ;;
  restore)
    loeb_restore $*
    ;;
  save)
    loeb_save $*
    ;;
  setup)
    loeb_setup $*
    ;;
  stash)
    loeb_stash $*
    ;;
  sync)
    loeb_sync $*
    ;;
  *)
    usage
    ;;
esac

